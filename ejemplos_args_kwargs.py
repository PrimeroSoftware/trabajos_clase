"""
Ejemplos de funciones con *args y **kwargs en Python
====================================================
"""

print("=== EJEMPLOS DE *args ===")
print()

# Ejemplo 1: Funci√≥n que suma n√∫meros variables
def sumar_numeros(*args):
    """Suma todos los n√∫meros que se pasen como argumentos"""
    total = 0
    for numero in args:
        total += numero
    return total

# Pruebas con *args
print("1. Funci√≥n que suma n√∫meros variables:")
print(f"sumar_numeros(1, 2, 3) = {sumar_numeros(1, 2, 3)}")
print(f"sumar_numeros(10, 20) = {sumar_numeros(10, 20)}")
print(f"sumar_numeros(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) = {sumar_numeros(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)}")
print()

# Ejemplo 2: Funci√≥n que encuentra el m√°ximo
def encontrar_maximo(*args):
    """Encuentra el n√∫mero m√°ximo entre los argumentos"""
    if not args:
        return None
    return max(args)

print("2. Funci√≥n que encuentra el m√°ximo:")
print(f"encontrar_maximo(5, 2, 8, 1, 9) = {encontrar_maximo(5, 2, 8, 1, 9)}")
print(f"encontrar_maximo(100, 50, 75) = {encontrar_maximo(100, 50, 75)}")
print()

# Ejemplo 3: Funci√≥n que imprime nombres
def saludar_personas(*nombres):
    """Saluda a todas las personas que se pasen como argumentos"""
    if not nombres:
        print("No hay nadie a quien saludar")
    else:
        for nombre in nombres:
            print(f"¬°Hola, {nombre}!")

print("3. Funci√≥n que saluda a varias personas:")
saludar_personas("Ana", "Carlos", "Mar√≠a", "Pedro")
print()

print("=== EJEMPLOS DE **kwargs ===")
print()

# Ejemplo 4: Funci√≥n que muestra informaci√≥n de una persona
def mostrar_info_persona(**kwargs):
    """Muestra informaci√≥n de una persona usando argumentos con nombre"""
    print("Informaci√≥n de la persona:")
    for clave, valor in kwargs.items():
        print(f"  {clave.capitalize()}: {valor}")
    print()

print("4. Funci√≥n que muestra informaci√≥n de una persona:")
mostrar_info_persona(nombre="Juan", edad=25, ciudad="Madrid", profesion="Ingeniero")
mostrar_info_persona(nombre="Ana", edad=30, pais="Espa√±a")
print()

# Ejemplo 5: Funci√≥n que crea un perfil de usuario
def crear_perfil_usuario(nombre, **kwargs):
    """Crea un perfil de usuario con informaci√≥n b√°sica y adicional"""
    perfil = {"nombre": nombre}
    
    # Agregar informaci√≥n adicional del kwargs
    for clave, valor in kwargs.items():
        perfil[clave] = valor
    
    return perfil

print("5. Funci√≥n que crea un perfil de usuario:")
perfil1 = crear_perfil_usuario("Carlos", edad=28, email="carlos@email.com", hobby="programaci√≥n")
perfil2 = crear_perfil_usuario("Mar√≠a", edad=32, ciudad="Barcelona", trabajo="Doctora")

print("Perfil 1:", perfil1)
print("Perfil 2:", perfil2)
print()

print("=== EJEMPLOS COMBINANDO *args y **kwargs ===")
print()

# Ejemplo 6: Funci√≥n que combina ambos
def funcion_completa(nombre, *args, **kwargs):
    """Ejemplo que combina par√°metro normal, *args y **kwargs"""
    print(f"Nombre: {nombre}")
    
    if args:
        print("Argumentos posicionales adicionales:")
        for i, arg in enumerate(args, 1):
            print(f"  Arg {i}: {arg}")
    
    if kwargs:
        print("Argumentos con nombre:")
        for clave, valor in kwargs.items():
            print(f"  {clave}: {valor}")
    print()

print("6. Funci√≥n que combina todo:")
funcion_completa("Pedro", "dato1", "dato2", edad=25, ciudad="Valencia")
funcion_completa("Luc√≠a", profesion="Artista", hobby="pintura")
print()

# Ejemplo 7: Funci√≥n que simula una calculadora
def calculadora(operacion, *numeros, **opciones):
    """Calculadora que puede realizar diferentes operaciones"""
    if not numeros:
        return "Error: Se necesitan n√∫meros para calcular"
    
    precision = opciones.get('precision', 2)
    mostrar_proceso = opciones.get('mostrar_proceso', False)
    
    if operacion == "suma":
        resultado = sum(numeros)
        if mostrar_proceso:
            print(f"Sumando: {' + '.join(map(str, numeros))} = {resultado}")
    elif operacion == "multiplicacion":
        resultado = 1
        for num in numeros:
            resultado *= num
        if mostrar_proceso:
            print(f"Multiplicando: {' √ó '.join(map(str, numeros))} = {resultado}")
    elif operacion == "promedio":
        resultado = sum(numeros) / len(numeros)
        if mostrar_proceso:
            print(f"Promedio de {numeros} = {resultado}")
    else:
        return "Operaci√≥n no soportada"
    
    return round(resultado, precision)

print("7. Calculadora flexible:")
print(f"Suma: {calculadora('suma', 10, 20, 30, 40)}")
print(f"Multiplicaci√≥n: {calculadora('multiplicacion', 2, 3, 4, mostrar_proceso=True)}")
print(f"Promedio: {calculadora('promedio', 85, 90, 78, 92, precision=1, mostrar_proceso=True)}")
print()

# Ejemplo 8: Funci√≥n que registra eventos
def registrar_evento(tipo_evento, *detalles, **metadatos):
    """Registra un evento con detalles y metadatos"""
    print(f"üîî EVENTO: {tipo_evento.upper()}")
    
    if detalles:
        print("   Detalles:")
        for detalle in detalles:
            print(f"   - {detalle}")
    
    if metadatos:
        print("   Metadatos:")
        for clave, valor in metadatos.items():
            print(f"   - {clave}: {valor}")
    
    print("-" * 40)

print("8. Sistema de registro de eventos:")
registrar_evento("login", "Usuario conectado", "IP verificada", 
                usuario="admin", tiempo="14:30", dispositivo="laptop")

registrar_evento("error", "Conexi√≥n fallida", "Timeout despu√©s de 30s",
                codigo=500, modulo="database", prioridad="alta")
print()

print("=== CONSEJOS Y BUENAS PR√ÅCTICAS ===")
print()
print("‚Ä¢ *args permite pasar cualquier cantidad de argumentos posicionales")
print("‚Ä¢ **kwargs permite pasar cualquier cantidad de argumentos con nombre")
print("‚Ä¢ Se pueden combinar par√°metros normales, *args y **kwargs")
print("‚Ä¢ El orden debe ser: par√°metros normales, *args, **kwargs")
print("‚Ä¢ Son √∫tiles para crear funciones flexibles y extensibles")
print("‚Ä¢ 'args' y 'kwargs' son solo nombres convencionales, puedes usar otros nombres")
